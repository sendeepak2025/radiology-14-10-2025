{
  "Name": "{{ORTHANC_NAME}}",
  "DicomAet": "{{ORTHANC_AET}}",
  "DicomPort": "{{ORTHANC_DICOM_PORT}}",
  "HttpPort": "{{ORTHANC_HTTP_PORT}}",
  
  "RemoteAccessAllowed": true,
  "AuthenticationEnabled": true,
  "RegisteredUsers": {
    "{{ORTHANC_USERNAME}}": "{{ORTHANC_PASSWORD}}"
  },
  
  "DicomModalities": {},
  "OrthancPeers": {},
  
  "HttpVerbose": false,
  "DicomVerbose": false,
  
  "StorageDirectory": "/var/lib/orthanc/storage",
  "IndexDirectory": "/var/lib/orthanc/db",
  
  "StorageCompression": false,
  "MaximumStorageSize": 0,
  "MaximumPatientCount": 0,
  
  "DicomAssociationCloseDelay": 5,
  "DicomScuTimeout": 10,
  "DicomScpTimeout": 30,
  
  "HttpTimeout": 60,
  "HttpRequestTimeout": 30,
  
  "UnknownSopClassAccepted": false,
  "DicomCheckModalityHost": false,
  
  "DicomAlwaysAllowEcho": true,
  "DicomAlwaysAllowFind": false,
  "DicomAlwaysAllowMove": false,
  "DicomAlwaysAllowGet": false,
  "DicomAlwaysAllowStore": true,
  
  "DicomCheckCalledAet": false,
  "DicomCheckCallingAet": false,
  
  "ExecuteLuaEnabled": true,
  "HttpsVerifyPeers": true,
  "HttpsCACertificates": "",
  
  "UserMetadata": {},
  "DefaultEncoding": "Latin1",
  "DeidentifyLogs": true,
  "DeidentifyLogsDicomVersion": "2023b",
  
  "LoadPrivateDictionary": true,
  "Dictionary": {},
  
  "SynchronousCMove": true,
  "JobsHistorySize": 10,
  "SaveJobs": true,
  
  "OverwriteInstances": false,
  "MediaArchiveSize": 1,
  
  "StoreMD5ForAttachments": true,
  
  "LimitFindResults": 0,
  "LimitFindInstances": 0,
  
  "LogExportedResources": false,
  "KeepAlive": true,
  "TcpNoDelay": true,
  
  "HttpThreadsCount": 50,
  "HttpDescribeErrors": true,
  
  "DicomTlsEnabled": "{{DICOM_TLS_ENABLED}}",
  "DicomTlsCertificate": "{{DICOM_TLS_CERT_PATH}}",
  "DicomTlsPrivateKey": "{{DICOM_TLS_KEY_PATH}}",
  "DicomTlsTrustedCertificates": "{{DICOM_TLS_CA_PATH}}",
  "DicomTlsRemoteCertificateRequired": true,
  
  "HttpsCertificate": "{{HTTPS_CERT_PATH}}",
  "HttpsPrivateKey": "{{HTTPS_KEY_PATH}}",
  
  "Plugins": [],
  
  "OnStoredInstance": [
    "function OnStoredInstance(instanceId, tags, metadata, origin)",
    "  -- Non-destructive webhook to bridge service with enhanced security",
    "  local webhook_url = '{{WEBHOOK_URL}}'",
    "  local webhook_secret = '{{WEBHOOK_SECRET}}'",
    "  ",
    "  -- Prepare payload with instance metadata",
    "  local payload = {}",
    "  payload['instanceId'] = instanceId",
    "  payload['studyInstanceUID'] = tags['StudyInstanceUID']",
    "  payload['seriesInstanceUID'] = tags['SeriesInstanceUID']",
    "  payload['sopInstanceUID'] = tags['SOPInstanceUID']",
    "  payload['patientID'] = tags['PatientID']",
    "  payload['patientName'] = tags['PatientName']",
    "  payload['modality'] = tags['Modality']",
    "  payload['studyDate'] = tags['StudyDate']",
    "  payload['origin'] = origin",
    "  payload['timestamp'] = os.time()",
    "  payload['nonce'] = tostring(math.random(1000000, 9999999))",
    "  ",
    "  -- Convert to JSON",
    "  local json_payload = DumpJson(payload)",
    "  ",
    "  -- Calculate HMAC-SHA256 signature for security",
    "  local signature = ComputeSHA256(json_payload .. webhook_secret)",
    "  ",
    "  -- Send webhook with security headers",
    "  local headers = {}",
    "  headers['Content-Type'] = 'application/json'",
    "  headers['X-Orthanc-Signature'] = signature",
    "  headers['X-Orthanc-Instance-Id'] = instanceId",
    "  headers['X-Orthanc-Timestamp'] = tostring(os.time())",
    "  headers['X-Orthanc-Nonce'] = payload['nonce']",
    "  ",
    "  -- Non-blocking webhook call",
    "  local success, response = pcall(function()",
    "    return HttpPost(webhook_url, json_payload, headers)",
    "  end)",
    "  ",
    "  if not success then",
    "    print('Webhook failed for instance: ' .. instanceId .. ' - ' .. tostring(response))",
    "  else",
    "    print('Webhook sent for instance: ' .. instanceId)",
    "  end",
    "end"
  ],
  
  "OnChange": [],
  "OnDeletedPatient": [],
  "OnDeletedStudy": [],
  "OnDeletedSeries": [],
  "OnDeletedInstance": [],
  "OnStablePatient": [],
  "OnStableStudy": [],
  "OnStableSeries": [],
  
  "IncomingHttpRequestFilter": [],
  "OutgoingHttpRequestFilter": [],
  
  "ReceivedInstanceFilter": [],
  "IncomingFindRequestFilter": [],
  "IncomingMoveRequestFilter": [],
  "IncomingCStoreRequestFilter": [],
  
  "WorklistCallback": []
}